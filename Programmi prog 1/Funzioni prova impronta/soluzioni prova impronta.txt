/*---------------------------------------------- TRACCIA 1 -------------------------------------------*/
/* 
	Sviluppare una function C che, dati come parametri di input un array di int e il suo size, 
	determina e restituisce come parametro di output il secondo piÃ¹ grande elemento dell'array.
*/

int traccia1(int *a, int n) {
	int max, max2, i;
	if(a[0]>a[1]){
		max=a[0];
		max2=a[1];
	}else{
		max=a[1];
		max2=a[0];
	}
	for(i=2; i<n; i++){
		if(a[i]>max){
			max2=max;
			max=a[i];
		}else if(a[i]>max2)
			max2=a[i];
	}
	return max2;
}

/*---------------------------------------------- TRACCIA 2 -------------------------------------------*/
/* 
	Sviluppare una function C che, dato come parametro di
 	input un array di tipo struct punto {double x; double y;} e il
 	suo size, determina e restituisce come parametri di output gli
 	indici dei due punti che hanno distanza minima tra loro. I campi
 	x e y contengono l'ascissa e l'ordinata, rispettivamente, di un
 	punto. 
*/

struct punto{
	double x;
	double y;
};

double calcolo_distanza(punto *p1, punto *p2){
	return sqrt((pow(p2.x-p1.x,2))+pow(p2.y-p1.y));
}

void traccia2(punto *a, int n, int *p1, int *p2){
	double distanza_min, distanza;
	int i, j;
	*p1=-1;
	*p2=-1;
	if(n>=2){
		distanza_min=calcolo_distanza(a[0], a[1]);
		for(i=0; i<n-1; i++){
			for(j=i+1; j<n; j++){
				distanza=calcolo_distanza(a[i], a[j]);
				if(distanza<distanza_min){
					distanza_min=distanza;
					*p1=i;
					*p2=j;
				}
			}
		}
	}
}

/*---------------------------------------------- TRACCIA 3 -------------------------------------------*/
/* 
	Sviluppare una function C che, dato come parametro
 	di input un array di tipo struct punto {double x; double y;}
 	e il suo size, determina e restituisce come parametro di output
 	la massima distanza tra i punti. I campi x e y contengono
 	l'ascissa e l'ordinata, rispettivamente, di un punto.
*/ 

struct punto{
	double x;
	double y;
};

double calcolo_distanza(punto *p1, punto *p2){
	return sqrt((pow(p2.x-p1.x,2))+pow(p2.y-p1.y));
}

double traccia3(punto *a, int n){
	double distanza_max, distanza;
	int i, j;
	if(n>=2){
		distanza_max=calcolo_distanza(a[0], a[1]);
		for(i=0; i<n-1; i++){
			for(j=i+1; j<n; j++){
				distanza=calcolo_distanza(a[i], a[j]);
				if(distanza>distanza_max)
					distanza_max=distanza;
			}
		}
	}
	return distanza_max;
}

/*---------------------------------------------- TRACCIA 4 -------------------------------------------*/
/*
	Sviluppare una function C che, dati come parametri di input un array 2D di double, il
	numero delle righe e il numero delle colonne, determina e restituisce come parametro
	di output il massimo tra le somme degli elementi di ogni colonna.
*/ 

double traccia4(double a[][100], int row, int col){
	int i, j;
	double somma=0, max=0;
	for(i=0; i<col; i++){
		for(j=0; j<row; j++)
			somma+=a[j][i];
		if(somma>max)
			max=somma;
		somma=0;
	}
	return max;
}

/*---------------------------------------------- TRACCIA 5 -------------------------------------------*/
/*
	Sviluppare una function C che, dati come parametri di input un array 2D di int,
	il numero delle righe e il numero delle colonne, determina e restituisce
	come parametro di output il massimo tra le somme degli elementi di ogni riga.
*/

double traccia5(double a[][100], int row, int col){
	int i, j;
	double somma=0, max=0;
	for(i=0; i<row; i++){
		for(j=0; j<col; j++)
			somma+=a[i][j];
		if(somma>max)
			max=somma;
		somma=0;
	}
	return max;
}

/*---------------------------------------------- TRACCIA 6 -------------------------------------------*/
/*
	Scrivere una funzione che dati in input due array ordinati (rispetto al campo matricola)
	di elementi della seguente struttura:
	struct studente {
		char *nome;
		char *cognome;
		int matricola;
	};
	restituisca in output l'array fusione dei due array.
	La fusione deve avvenire in base al campo matricola.
 */

struct studente{
	char *nome;
	char *cognome;
	int matricola;
};

void traccia6(studente *a, int n, studente *b, int m, studente *fusione){
	int countA=0, countB=0, countC=0;
	while(countA<n && countB<m){
		if(a[countA].matricola<b[countB].matricola)
			c[countC++]=a[countA++];
		else
			c[countC++]=b[countB++];
	}
	while(countA<n)
		c[countC++]=a[countA++];
	while(countB<m)
		c[countC++]=b[countB++];
}

/*---------------------------------------------- TRACCIA 7 -------------------------------------------*/
/*
	Scrivere una funzione che dati in input due array di strutture del seguente tipo
	struct prodotto {char *nome; int codice; double prezzo;};
	restituisce in output 1 se i due array di struct sono uguali, 0 se non lo sono.
	Si noti che due dati struct sono uguali se sono uguali tutti i loro campi.
*/ 

struct prodotto{
	char *nome;
	int codice;
	double prezzo;
};

int uguale(prodotto p1, prodotto p2){
	if((strcmp(p1.nome, p2.nome)==0) && (p1.codice==p2.codice) && (p1.prezzo==p2.prezzo))
		return 1;
	else
		return 0;
}

int traccia7(prodotto *v, int n, prodotto *v1, int m){
	int i;
	if(n==m){
		for(i=0; i<n; i++){
			if(uguale(v[i], v1[i])==0)
				i=n+1;
			if(i==n)
				return 1;
			else
				return 0;
		}
	} else
		return 0;
}

/*---------------------------------------------- TRACCIA 8 -------------------------------------------*/
/*
	Sviluppare una function C che, data come parametro di input una stringa che
	rappresenta un testo in italiano, determina e restituisce
	come parametro di output il numero di parole di tre lettere contenute nel
	testo. Nel testo le parole sono separate da un unico spazio. 
*/

int traccia8(char *testo){
	char *tmp=strtok(testo, " ");
	int i=0;
	while(tmp!=NULL){
		if(strlen(tmp)==3)
			i++;
		tmp=strtok(NULL, " 	");
	}
	return i;
}

/*---------------------------------------------- TRACCIA 9 -------------------------------------------*/
/*
	Sviluppare una function C che, data come parametro di input una stringa che
	rappresenta un testo in italiano, determina e restituisce
	come parametro di output il numero di parole che terminano in are contenute nel 
	testo. Nel testo le parole sono separate da un unico spazio. 
*/

int traccia9(char *testo){
	int i=0;
	char *tmp=strtok(testo, " ");
	while(tmp!=NULL){
		if(strlen(tmp)>=3){
			if(strcmp(&tmp[strlen(tmp)-3], "are")==0)
				i++;
		}	
		tmp=strtok(NULL, " ");
	}
	return i;
}

/*---------------------------------------------- TRACCIA 10 -------------------------------------------*/
/*
	Sviluppare una function C che, data come parametro di input una stringa che
	rappresenta un testo in italiano, determina e restituisce
 	come parametro di output il numero di parole che iniziano con a e terminano
	con e contenute nel testo. Nel testo le parole sono separate
 	da un unico spazio.  
*/

int traccia10(char *testo){
	int i=0;
	char *tmp=strtok(testo, " ");
	while(tmp!=NULL){
		if((tmp[0]=='a') && (tmp[strlen(tmp)-1]=='e'))
			i++;
		tmp=strtok(NULL, " ");
	}
	return i;
}

/*---------------------------------------------- TRACCIA 11 -------------------------------------------*/
/*
	Sviluppare una function C che, data come parametro di input una stringa che
	rappresenta un testo in italiano, determina e restituisce
 	come parametro di output il numero delle parole contenute nel testo che
	hanno almeno 5 vocali. Nel testo le parole sono separate da
 	un unico spazio.
*/

typedef enum{false, true} boolean;

boolean check_vocali(char c){
	if((c=='a') || (c=='e') || (c=='i') || (c=='o') || (c=='u'))
		return true;
	else
		return false;
}

int traccia11(char *testo){
	int i, j, k=0;
	char *tmp=strtok(testo, " ");
	while(tmp!=NULL){
		j=0;
		for(i=0; i<strlen(tmp); i++){
			if(check_vocali(tmp[i]))
				j++;
		}
		if(j>=5)
			k++;
		tmp=strtok(NULL, " ");
	}
	return k;
}

/*---------------------------------------------- TRACCIA 12 -------------------------------------------*/
/*
	Sviluppare una function C che, data come parametro di input una stringa che
	rappresenta un testo in italiano, determina e restituisce
 	come parametri di output la parola di lunghezza massima contenuta nel testo
	e la sua lunghezza. Nel testo le parole sono separate da
 	un unico spazio. 
*/

void traccia12(char *testo, char *parola_max, int *max){
	*max=0;
	char *tmp=strtok(testo, " ");
	while(tmp!=NULL){
		if(strlen(tmp)>*max){
			*max=strlen(tmp);
			strcpy(parola_max, tmp);
		}
		tmp=strtok(NULL, " ");
	}
}

/*---------------------------------------------- TRACCIA 13 -------------------------------------------*/
/*
	Sviluppare una function C che, data come parametro di input una stringa che
 	rappresenta un testo in italiano, determina e restituisce come parametri di
	output la parola di lunghezza minima contenuta nel testo e la sua lunghezza. 
	Nel testo le parole sono separate da un unico spazio. 
*/

void traccia13(char *testo, char *parola_min, int *min){
	*min=strlen(testo);
	char *tmp=strtok(testo, " ");
	while(tmp!=NULL){
		if(strlen(tmp)<*min){
			*min=strlen(tmp);
			strcpy(parola_min, tmp);
		}
		tmp=strtok(NULL, " ");
	}
}

/*---------------------------------------------- TRACCIA 14 -------------------------------------------*/
/*
	Sviluppare una function C che, data come parametro di input una stringa che
	rappresenta un testo in italiano, determina e restituisce come parametri di 
	output la parola di lunghezza minima contenuta nel testo e la posizione di 
	inizio della parola nella stringa. Nel testo le parole sono separate da un 
	unico spazio.  
*/

void traccia14(char *testo, char *parola_min, int *pos){
	char *tmp=strtok(testo, " "), posizione;
	int min=strlen(frase);
	while(tmp!=NULL){
		if(strlen(tmp)<min){
			min=strlen(tmp);
			strcpy(parola_min, tmp);
			posizione=tmp;
		}
		tmp=strtok(NULL, " ");
	}
	*pos=(int)posizione-(int)testo;
}

/*---------------------------------------------- TRACCIA 15 -------------------------------------------*/
/*
	Sviluppare una function C che, dati come parametri di input un array di char
 	e il suo size, determina e restituisce come parametro di output l'array
 	(di size 21) del numero delle occorrenze delle 21 lettere dell'alfabeto
 	italiano (per es. il numero di occorrenze della lettera a Ã¨ il numero di
	volte in cui la lettera a compare nel testo).
*/

int occorrenze[21];

void traccia15(char *testo, int n, int *occorrenze){
	char alfabeto[]={'a','b','c','d','e','f','g','h','i','l','m','n','o','p','q','r','s','t','u','v','z'};
	strlwr(testo);
	for(i=0; testo[i]!=NULL; i++){
		for (j=0; j<n; j++){
			if(testo[i]==alfabeto[j])
				occorrenze[j]++;
		}
	}
}

/*---------------------------------------------- TRACCIA 16 -------------------------------------------*/
/*
	Sviluppare una function C che, dati come parametri di input un array di char
	e il suo size, determina e restituisce come parametro di output l'array occorrenze 
	(di size 21) del numero delle occorrenze dell'evento a precede ognuna delle 21 
	lettere dell'alfabeto italiano (cioÃ¨ occorrenze[0] Ã¨ il numero di volte in cui 
	accade che a precede a, cioÃ¨ che nel testo compare aa, occorrenze[1] Ã¨ il 
	numero di volte in cui accade che a precede b, cioÃ¨ che nel testo compare ab,
	occorrenze[2] Ã¨ il numero di volte in cui accade che a precede c, cioÃ¨ che 
	nel testo compare ac).
*/

int occorrenze[21];

void traccia16(char *testo, int n, int *occorrenze){
	char *parola, alfabeto[]={'a','b','c','d','e','f','g','h','i','l','m','n','o','p','q','r','s','t','u','v','z'};
	strlwr(testo);
	int i;
	for(parola=strchr(testo, 'a'); parola!=NULL; parola=strchr(parola+1, 'a')){
		for (i=0; i<n; i++){
			if (*(parola+1)==alfabeto[i])
				occorrenze[i]++;
		}
	}
}

/*---------------------------------------------- TRACCIA 17 -------------------------------------------*/
/*
	Sviluppare una function C che, dati come parametri di input un array di char
	e il suo size, determina e restituisce come parametro un dato logico che
	indica se il testo nell'array Ã¨ un pangramma, ovvero un testo che contiene,
	almeno una volta, tutte le 21 lettere dell'alfabeto italiano.
*/

typedef enum{false, true} boolean;

booelan traccia17(char *testo, int n){
	strlwr(testo);
	int i, count=0, occorrenze[21];
	for(i=0; i<n; i++){
		if((testo[i]!='j') && (testo[i]!='k') && (testo[i]!='w') && (testo[i]!='x') && (testo[i]!='y')){
			if (testo[i]>='a' && testo[i]<'j')
				occorrenze[testo[i]-'a']++;
			else if (testo[i]>'k' && testo[i]<'w')
				occorrenze[testo[i]-'a'-2]++;
			else
				occorrenze[testo[i]-'a'-5]++;
		}
	}
	for(i=0; i<21; i++){
		if(occorrenze[i]!=0)
			count++;
	}
	if(count>=21)
		return true;
	else
		return false;
}

/*---------------------------------------------- TRACCIA 18 -------------------------------------------*/
/*
	Sviluppare una function C che, dati come parametri di input un array di char
	e il suo size, determina e restituisce come parametro di output il carattere 
	piÃ¹ frequente. 
*/

char traccia18(char *testo, int n){
	char alfabeto[]={'a','b','c','d','e','f','g','h','i', 'j', 'k', 'l','m','n','o','p','q','r','s','t','u','v', 'w', 'x', 'y', 'z'};
	int i, j, frequente[26];
	strlwr(testo);
	for(i=0; i<26; i++){
		for(j=0; j<n; j++){
			if(alfabeto[i]==testo[j])
				frequente[i]++;
		}
	}
	for(i=1, j=0; i<26; i++){
		if(frequente[i]>frequente[j])
			j=i;
	}
	return alfabeto[j];
}

/*---------------------------------------------- TRACCIA 19 -------------------------------------------*/
/*
	Sviluppare una function C che, dati come parametri di input un array di char
	e il suo size, determina e restituisce come parametro di output il carattere 
	meno frequente. 
*/

char traccia19(char *testo, int n, char *alfabeto){
	int i, j, frequente[26];
	char alfabeto[]={'a','b','c','d','e','f','g','h','i', 'j', 'k', 'l','m','n','o','p','q','r','s','t','u','v', 'w', 'x', 'y', 'z'};
	strlwr(testo);
	for(i=0; i<26; i++){
		for(j=0; j<n; j++){
			if(alfabeto[i]==testo[j])
				frequente[i]++;
		}
	}
	for(i=1, j=0; i<26; i++){
		if(frequente[i]<frequente[j]){
			if(frequente[i]>=1)
				j=i
		}
	}
	return alfabeto[j];
}

/*---------------------------------------------- TRACCIA 20 -------------------------------------------*/
/*
	Dato un elenco (array) di persone partecipanti a un concorso, ordinare l'elenco in ordine alfabetico
 	in base al campo cognome. La struttura che identifica il partecipante come:
 	struct persona {char *nome; char *cognome;};
 	typedef struct persona id;
 	struct partecipante {id *utente; unsigned short codice; }; 
*/

struct persona{
	char nome[100];
	char cognome[100];
};

typedef struct persona id;

struct partecipante{
	id *utente;
	unsigned short codice;
};

void traccia20(partecipante *lista, int n){
	partecipante el_da_ins;
	int i, j;
	for(i=1; i<n; i++){
		el_da_ins=lista[i];
		j=i-1;
		while(j>=0 && strcmp(el_da_ins.utente->cognome, lista[j].utente->cognome)<0){
			lista[j+1]=lista[j]
			j--;
		}
		lista[j+1]=el_da_ins;
	}
}

/*---------------------------------------------- TRACCIA 21 -------------------------------------------*/
/*
	Scrivere un programma per simulare l'inserimento di un PIN per il telefonino.
	Nella prima fase viene costruito il PIN di riferimento,che deve essere di
	lunghezza 5 e che deve essere costruito in modo casuale.
	Nella seconda fase l'utente inserisce il codice di tentativo e ha al massimo
	3 tentativi per indovinarlo. 
*/

int pin;
srand(time(NULL));
pin=10000+rand();
typedef enum{false, true} boolean;

void traccia21(int pin){
	int i=3, tentativo;
	boolean indovinato=false;
	while(!indovinato && i!=0){
		printf("Inserisci il tuo codice di tentativo: ");
		scanf("%d", &tentativo);
		if(pin==tentativo)
			indovinato=true;
		else{
			printf("pin errato. Riprovare...\n");
			i--;
		}
	}
	if(i==0){
		printf("Tentativi esauriti...\n");
		indovinato=false;
	}
}

/*---------------------------------------------- TRACCIA 22 -------------------------------------------*/
/*
	Due giocatori si sfidano lanciando un dado truccato. Il dado ha dei valori
	interi nell'intervallo[5,15]. A ogni turno vince il giocatore che ottiene un
	puntaggio maggiore. In caso di paritÃ  il punto viene assegnato a entrambi.
 	Simulare 10 sfide e visualizzare il giocatore che vince piÃ¹ volte.  
*/

void traccia 22(){
	srand(time(NULL));
	int i, dado1, dado2, player1=0, player2=0;
	for(i=0; i<10; i++){
		dado1=5+rand()%11;
		dado2=5+rand()%11;
		if(dado1>dado2)
			player1++;
		else if(dado1<dado2)
			player2++;
		else{
			player1++;
			player2++;
		}
	}
	if(player1>player2)
		printf("Ha vinto player1\n");
	else if(player1<player2)
		printf("Ha vinto player2\n");
	else
		printf("ParitÃ \n");
}

/*---------------------------------------------- TRACCIA 23 -------------------------------------------*/
/*
	Scrivere una function C che ha come input i dati che identificano uno studente 
	(nome, cognome, matricola) e che restituisce in output una struttura dati opportuna, che contiene 
	i dati di identificazione e il libretto universitario con al massimo 20 esami. 
	Ogni esame Ã¨ caratterizzato	da denominazione, cfu e voto.   
*/

struct allievo{
	char Nome[100];
 	char Cognome[100];
 	int Matricola;
};
typedef struct allievo Studente;

struct voti{
 	char NomeEsame[50];
	int Voto;
};
typedef struct voti Esami;

struct storiaalunno{
 	Studente *alunno;
 	int NumeroEsamiDati;
 	Esami Libretto[19];
};
typedef struct storiaalunno Carriera;

void main(){
 	char *Corsi[] = { "Programmazione1", "Matematica1", "ArchitetturaCalcolatori", "Fisica", "Programmazione2", "EconimiaAziendale", "Inglese", "AlgoritmiStruttreDati",
 					"Matematica2" }; // size = 9
 	Carriera Elenco[100];
 	Studente Nominativi[100];
 	int i, j, k, NumeroStudenti, ContMatricola=1;
 	srand(time(NULL));
 	
 	// Numero studenti dell'universitÃ 
 	printf("Inserire il numero di studenti che frequentano l'Universita': \n");
 	scanf("%d", &NumeroStudenti);
 
 	// Richiesta di inserire gli studenti dell'universitÃ 
 	for(i=0; i<NumeroStudenti; i++, ContMatricola++){
	 	printf(" STUDENTE N = %d \n ", i+1);
	 	printf(" Inserire il Cognome = \n");
	 	gets(Nominativi[i].Cognome);
	 	printf(" Inserire il Nome = \n");
	 	gets(Nominativi[i].Nome);
 		Nominativi[i].Matricola=ContMatricola;
 		Elenco[i].alunno=Nominativi+i;
 	}
 	
 	// Creazione Carriera Universitaria Studente
 	for(i=0; i<NumeroStudenti; i++){
 		j=rand()%9; // Numero di Esami dati dallo Studente
	 	for(k=0; k<j; k++){
	 		strcpy(Elenco[i].Libretto[k].NomeEsame, Corsi[k]);
	 		Elenco[i].Libretto[k].Voto=18+(rand()%13);
	 	}
	 	Elenco[i].NumeroEsamiDati=j;
	}
 
 	// Stampa Carriera Universitaria Studenti
 	for (i=0; i<NumeroStudenti; i++){
 		system("CLS");
 		printf("\n STUDENTE N = %d\n", i+1);
 		printf(" Cognome Studente = %s\n", Elenco[i].alunno->Cognome);
 		printf(" Nome Studente = %s\n", Elenco[i].alunno->Nome);
 		printf(" Matricola Studente = %d\n", Elenco[i].alunno->Matricola);
 		printf("\n Numero Esami Dati = %d\n", Elenco[i].NumeroEsamiDati);
 		if(Elenco[i].NumeroEsamiDati>0){
 			for(j=0; j<Elenco[i].NumeroEsamiDati; j++){
 				printf("\n/*********************************/\n");
 				printf(" Nome Esame = %s\n", Elenco[i].Libretto[j].NomeEsame);
 				printf(" Voto Esame = %d\n", Elenco[i].Libretto[j].Voto);
 			}
 		}
 		else 
 			printf("Studente non ha dato ESAMI... \n");
 	}
}